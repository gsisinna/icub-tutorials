/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_IRPCSERVER_H
#define YARP_THRIFT_GENERATOR_SERVICE_IRPCSERVER_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

/**
 * IRpcServer
 * Interface for an example module.
 */
class IRpcServer :
        public yarp::os::Wire
{
public:
    // Constructor
    IRpcServer();

    /**
     * Get answer from server
     * @return the answer
     */
    virtual std::int32_t get_answer();

    /**
     * Set value for future answers.
     * @param rightAnswer new answer
     * @return true if connection was successful
     */
    virtual bool set_answer(const std::int32_t rightAnswer);

    /**
     * Add one integer to future answers.
     * @param x value to add
     * @return new value
     */
    virtual std::int32_t add_int(const std::int32_t x);

    /**
     * Start service
     * @return true if service started correctly
     */
    virtual bool start();

    /**
     * Stop service
     * @return true if service stopped correctly
     */
    virtual bool stop();

    /**
     * Check is service is running
     * @return true/false if service is/is not running
     */
    virtual bool is_running();

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_IRPCSERVER_H
